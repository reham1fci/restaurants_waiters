import 'dart:convert'  show base64, json, utf8;import 'dart:typed_data';import 'dart:ui';import 'package:charset_converter/charset_converter.dart';import 'package:esc_pos_printer/esc_pos_printer.dart';import 'package:flutter/material.dart';import 'package:flutter/foundation.dart';import 'package:flutter/rendering.dart';import 'package:flutter/services.dart';import 'package:intl/intl.dart';import 'package:printing/printing.dart'  as myPrinter;import 'package:restaurants_waiters/ApiConnection/Api.dart';import 'package:restaurants_waiters/Database/DatabaseHelper.dart';import 'package:restaurants_waiters/Model/CashTypes.dart';import 'package:restaurants_waiters/Model/Customer.dart';import 'package:restaurants_waiters/Model/Invoices.dart';import 'package:restaurants_waiters/Model/Printer.dart';import 'package:restaurants_waiters/Model/Product.dart';import 'package:restaurants_waiters/Model/Settings.dart';import 'package:restaurants_waiters/Model/Tables.dart';import 'package:restaurants_waiters/Model/User.dart';import 'package:restaurants_waiters/Model/company.dart';import 'package:restaurants_waiters/Screens/DepartmentsPrinter.dart';import 'package:restaurants_waiters/Screens/Login.dart';import 'package:restaurants_waiters/Screens/PrinterAddation.dart';import 'package:restaurants_waiters/Screens/Products.dart';import 'package:restaurants_waiters/Screens/Setting.dart';import 'package:restaurants_waiters/Screens/Synchronization.dart';import 'package:restaurants_waiters/Screens/printInvoice.dart';import 'package:restaurants_waiters/Tools/Constant.dart';import 'package:restaurants_waiters/Tools/MethodsTools.dart';import 'package:restaurants_waiters/app_localizations.dart';import 'package:restaurants_waiters/my_colors.dart';import 'package:searchable_dropdown/searchable_dropdown.dart';import 'package:shared_preferences/shared_preferences.dart';import 'package:flutter_slidable/flutter_slidable.dart';import 'package:pdf/pdf.dart';import 'package:pdf/widgets.dart' as pw;import 'package:image/image.dart' as im;import 'dart:io';import 'package:google_fonts/google_fonts.dart';import 'package:esc_pos_utils/esc_pos_utils.dart';import 'package:printing/printing.dart'    show Printing, PdfRaster, PdfRasterImage;extension PdfRasterExt on PdfRaster {  im.Image asImage() {    return im.Image.fromBytes(width, height, pixels);  }}class Invoice extends StatefulWidget{  List<Product> productList   ;   double totalPriceAfterDiscount  ;   double  totalPrice ;   double totalTax  ;  bool  isActive  = true  ;  //callGetProduct ( int invoice)=>createState().getProduct();  Invoice({this.productList, this.totalPriceAfterDiscount, this.totalPrice,      this.totalTax , GlobalKey key}): super(key:key);  @override  InvoiceState createState() {    // TODO: implement createState    return  new InvoiceState()  ;  }}class InvoiceState  extends  State<Invoice>{  double total = 500 ;   int invoice_id  ;  List<Customer> customersList  = new List();  List<CashTypes> cashTypesList  = new List();  Methods tools  = new Methods()  ;  Customer selectCustomer  ;  final dbHelper = DatabaseHelper.instance;  String selectCustomerTxt   = "" ;  String selectCashTxt   = "" ;  CashTypes selectCashType  ;  List<Product> dataList  = new List();  List<Tables> tablesList  = new List();  String selectTableNm ="";  Tables selectTb  ;  double _totalPriceAfterDiscount  ;  double  _totalPrice  = 0;  double _totalTax  ;  TextEditingController qtyEd  = new TextEditingController()  ;  TextEditingController amountEd  = new TextEditingController()  ;  TextEditingController percentageEd  = new TextEditingController()  ;  TextEditingController payedEd  = new TextEditingController()  ;  TextEditingController remindEd  = new TextEditingController()  ;  Api  api  = new Api()  ;  Future <void> getProduct() async{    List<Product> list = new List() ;    print("invoice_id get product "  + invoice_id.toString())   ;    final allRows = await dbHelper.getProductsByInvID(invoice_id.toString())  ;    for(int i  =  0  ;  i  < allRows.length  ;  i++)     {      Map<String, dynamic> map = allRows[i]  ;      Product p  = Product.getFromSqlInvoice(map)  ;      list.add(p) ;    }    setState(() {      dataList  = list ;    print(dataList)  ;   });  }  final images = <ImageProvider>[];  @override  void initState() {    // TODO: implement initState  //  _updateImages();    super.initState();    getSetting() ;    getCustomers();    getCashTypes();    getTables()  ;    getLastInv() ;    selectInvoiceType  = invoiceTypes[0]  ;  }  Future <void> getLastInv() async{    final allRows = await dbHelper.getLastInvoice()  ;    print("length"+allRows.length.toString()) ;    for(int i  =  0  ;  i  < allRows.length  ;  i++) {      Map<String, dynamic> map = allRows[i];     Invoices invv = Invoices.getFromSqlInvoice(map);    /* if (invv.isOpen == 1) {        setState(() {          print("invoice_id getLastInv open "  + invoice_id.toString())   ;          invoice_id = invv.id;        });      }      else{        List<String> dates  =  Methods.getDateTime(settings.hoursLate.toInt());        int dailyNo = 1 ;        if(invv.billDate==dates[1]){          dailyNo = invv.invDailyNo +1 ;        }        Invoices inv  =  new Invoices(  isOpen: 1  , total: 0 , totalAfterDiscount: 0 , totalTax: 0 , billOpenDate: dates[0] , invDailyNo: dailyNo , billDate: dates[1]) ;        final id = await dbHelper.insert(inv.insertDb() , INVOICE_TB);*/        setState(() {          invoice_id = invv.id;          print("invoice_id getLastInv cloase "  + invoice_id.toString())   ;          ProductState.invoice_id  = invv.id;        });    //  }    }  }  Future<void> logout () async {    SharedPreferences    sharedPrefs = await SharedPreferences.getInstance();   // sharedPrefs.clear()  ;    sharedPrefs.remove("user");    sharedPrefs.commit()  ;   // int delete = await dbHelper.deleteTb(table: TABLE_TB)  ;    //int delete2 = await dbHelper.deleteTb(table:   CASH_TB)  ;   // int delete3 = await dbHelper.deleteTb(table: CUSTOMER_TB)  ;   // int delete8 = await dbHelper.deleteTb(table: DISCOUNT_TB)  ;    //int delete4 = await dbHelper.deleteTb(table: PRODUCT_TB)  ;    //int delete5 = await dbHelper.deleteTb(table:CATEGORY_TB)  ;   // int delete6 = await dbHelper.deleteTb(table:INVOICEPRODUCT_TB)  ;a   // int delete7 = await dbHelper.deleteTb(table:INVOICE_TB)  ;    Navigator.pushReplacement( context,        MaterialPageRoute(builder: (context) => Login())) ;  }  @override  Widget build(BuildContext context) {    List <String>settings   = new List();    settings.add(AppLocalizations.of(context).translate("settings")) ;    settings.add(AppLocalizations.of(context).translate("the_Syncing") );    settings.add(AppLocalizations.of(context).translate("add_printer")) ;    settings.add(AppLocalizations.of(context).translate("logout")) ;    if(mounted) {     getProduct();     getInvoice();    }     // TODO: implement build    return new Scaffold(     // floatingActionButton: FloatingActionButton,    //  appBar:  AppBar( backgroundColor :MyColors.white,actions: <Widget>[      /*  PopupMenuButton<String>(          onSelected: (String value) {            switch (settings.indexOf(value)) {              case 0 :                Navigator.push( context,                    MaterialPageRoute(builder: (context) => Setting())) ;                break;              case 1:                Navigator.push( context,                    MaterialPageRoute(builder: (context) => Synchronization())) ;                break;              case 2:                logout() ;                break;            }          },          itemBuilder: (BuildContext context) {            return              settings.map((String choice) {                return PopupMenuItem<String>(                  value: choice,                  child: Text(choice),                );              }).toList();          },          icon:  Icon(Icons.menu ,color: MyColors.colorPrimary,size: 20,),        ),*/     /*   IconButton(          icon:          Image.asset('images/customer_ic.png' ,width: 24 ,height: 24,),          onPressed: () {            // do something          },        )  ,*/       // popMenuCustomer() ,        //       // createVendorDropDown(),      // popMenuCash() ,      // popMenuTable() ,      //  popMenuInvoiceTypes() ,       /* IconButton(          icon:          Image.asset('images/pay_ic.png' ,width: 24 ,height: 24,),          onPressed: () {            // do something          },        )  ,        IconButton(          icon:          Image.asset('images/table_ic.png' ,width: 24 ,height: 24,color: MyColors.colorPrimary,),          onPressed: () {            // do something          },        )  ,        IconButton(          icon:          Image.asset('images/invoice_ic.png' ,width: 24 ,height: 24,color: MyColors.colorPrimary,),          onPressed: () {            // do something          },        )  ,*/     // ],     // ),      body: //Container(padding: EdgeInsets.only(left: 8 , right: 8) , child:      // SingleChildScrollView(     new Column(    children: [      new Row(children: [        createVendorDropDown(),        popMenuCash() ,        popMenuTable() ,        popMenuInvoiceTypes() ,      ],) ,     // costumer (),    //  customerDropDown(),     //cashDropDown(),     // tableDropDown (),    //  invoiceTypeDrop (),  /*  Padding(padding:EdgeInsets.only(left: 4.0 , right: 4.0) , child:  new Row(        mainAxisSize: MainAxisSize.max,        children: [          customerDropDown(),          VerticalDivider(),          cashDropDown(),        ],)),        Padding(padding:EdgeInsets.only(left: 4.0 , right: 4.0) , child:   new Row(        mainAxisSize: MainAxisSize.max,        children: [          tableDropDown (),          VerticalDivider(),          invoiceTypeDrop (),        ],)),*/  getView(dataList),      ],) ,    //  )     // getView(),        bottomNavigationBar: BottomAppBar(              child: Container(                height: 84,              child: Column(                children: <Widget>[          Padding(padding:EdgeInsets.all(4),             child:   Row(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            new Text(AppLocalizations.of(context).translate("total") ,style: TextStyle(fontSize:15 , ),),          new Text(_totalPriceAfterDiscount== null?_totalPriceAfterDiscount.toString():Methods.priceFormat(_totalPriceAfterDiscount)              ,style: TextStyle(fontSize:15 ,fontWeight: FontWeight.bold  ,       )          ) ],),),      Container(        padding: EdgeInsets.only(left: 4),        color: MyColors.blue,        child:      Row(mainAxisSize: MainAxisSize.max,          mainAxisAlignment: MainAxisAlignment.spaceEvenly,          children: <Widget>[                Expanded(child:  ElevatedButton(                    child: Text('خصم' ,style: TextStyle(color: MyColors.white),),                    onPressed: () {                    //  Navigator.of(context).pop();                      discountWindow()  ;                    },                    style: ButtonStyle(                        shape: MaterialStateProperty.all<RoundedRectangleBorder>(                            RoundedRectangleBorder(                                borderRadius: BorderRadius.zero,                                side: BorderSide(color: Colors.red)                            )                        )                    )    ),flex: 2,),            VerticalDivider(                width: 2,              color: Color(0xFFF6F4F4),            ),                    Expanded(child: ElevatedButton(                    child: Text('حفظ' , style: TextStyle(color: MyColors.white),),                    onPressed: () async {                   //   Navigator.of(context).pop();                      if(dataList.length>0){                      payWindow() ;                      }                      else{                        tools.Dialog(context: context  , title: "" , onOkClick: (){} , isCancelBtn: false ,                            message:"لايوجد اصناف ف الفاتوره اضف اصناف اولا" );                      }                    },                        style: ButtonStyle(                            shape: MaterialStateProperty.all<RoundedRectangleBorder>(                                RoundedRectangleBorder(                                    borderRadius: BorderRadius.zero,                                    side: BorderSide(color: Colors.red   ,)                                )                            )                        )                    ),flex: 2,),       //     Container(color: Colors.black45, height: 30, width: 2,),                    Expanded(child:      PopupMenuButton<String>(                      onSelected: (String value) {                        switch (settings.indexOf(value)) {                          case 0 :                            Navigator.push( context,                                MaterialPageRoute(builder: (context) => Setting())) ;                            break;                          case 1:                            Navigator.push( context,                                MaterialPageRoute(builder: (context) => Synchronization())) ;                            break;                          case 2:                            printerOption();                            break;                            case 3:                            logout() ;                            break;                        }                      },                      itemBuilder: (BuildContext context) {                        return                          settings.map((String choice) {                            return PopupMenuItem<String>(                              value: choice,                              child: Text(choice),                            );                          }).toList();                      },                      icon:  Icon(Icons.menu                        ,color: MyColors.white,size: 20,),                    ),flex: 1,  ),                  ]                  ),      )]),        )        ),    );  }  printerOption(){    return showDialog<void>(        context: context,        barrierDismissible: false, // user must tap button!        builder: (BuildContext context) {           return  AlertDialog(            content: new Center(child: Container(              height: 200,              child: new Column(              children: [               RaisedButton(onPressed:(){                  Navigator.pushReplacement( context,                      MaterialPageRoute(builder: (context) => PrinterAddition(printerType: 1,title:AppLocalizations.of(context).translate("cashier_printer") ,))) ;                },                color: Colors.white,                  child:Text(AppLocalizations.of(context).translate("cashier_printer")) ,                ),               // Divider(color:  MyColors.blue,)  ,                RaisedButton(onPressed:() {                  Navigator.pushReplacement( context,                      MaterialPageRoute(builder: (context) => PrinterAddition(printerType: 2,title: AppLocalizations.of(context).translate("supervisor_printer"),))) ;                }                ,                  color: Colors.white,                  child:Text(AppLocalizations.of(context).translate("supervisor_printer")) ,) ,              //  Divider(color:  MyColors.blue,)  ,                RaisedButton(onPressed:() {                  Navigator.pushReplacement( context,                      MaterialPageRoute(builder: (context) => DepPrinter())) ;                } ,                  color: Colors.white,                  child:Text(AppLocalizations.of(context).translate("departments_printer")) ,) ,              ],            ),),          ));    });  } Widget showTotalPrice(double d){  _totalPrice  = d ;  print(_totalPrice)  ;    return new Text(_totalPrice.toString()+   AppLocalizations.of(context).translate("currency") , style: new TextStyle(color:Colors.white),); }  Container invoiceType (){   return  //   Expanded(flex: 1, child:     //  new Padding(padding:EdgeInsets.all(2),child:       Container(         decoration: BoxDecoration(             border: Border.all(color: Colors.grey),         ),        child:        new Center(child:        new FlatButton(            onPressed: null ,            child:            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              new Text(AppLocalizations.of(context).translate("local") ,style: new TextStyle(fontSize: 10)),              new Icon(Icons.edit , color: MyColors.colorPrimary,)            ],)        )),        width: MediaQuery.of(context).size.width * 0.5,   );    } /* Container costumer (){    return    //  flex: 1, child:     // new Padding(padding:EdgeInsets.all(2),child:      Container(        decoration: BoxDecoration(          border: Border.all(color: Colors.grey),        ),        child:        new Center(child:        new FlatButton(            onPressed: null ,            child:            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                customerDropDown(),                //new Text("defult\nclient" ,style: new TextStyle(fontSize: 10)),                new Icon(Icons.edit , color: MyColors.colorPrimary,size: 20,)              ],)        )),        width: MediaQuery.of(context).size.width * 0.5,    );  }*/  Widget payWayOp (){    return      Expanded(         flex: 1, child:      // new Padding(padding:EdgeInsets.all(2),child:      Container(        decoration: BoxDecoration(          border: Border.all(color: Colors.grey),        ),        child:        new Center(child:        new FlatButton(            onPressed: null ,            child:            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                cashDropDown(),                //new Text("defult\nclient" ,style: new TextStyle(fontSize: 10)),                new Icon(Icons.edit , color: MyColors.colorPrimary,size: 20,)              ],)        )),       // width: MediaQuery.of(context).size.width * 0.5,      ) );  }  Container tableNum (){    return      //Expanded(     // flex: 1, child:    //  new Padding(padding:EdgeInsets.all(2),child:      Container(        decoration: BoxDecoration(          border: Border.all(color: Colors.grey),        ),        child:        new Center(child:        new FlatButton(            onPressed: null ,            child:            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                new Text("Table12" ,style: new TextStyle(fontSize: 10),),                new Icon(Icons.edit , color: MyColors.colorPrimary,)              ],)        )),      //  width: MediaQuery.of(context).size.width * 0.5,    );  }  Container payWay(){    return      //Expanded(flex: 1, child:    //  new Padding(padding:EdgeInsets.all(2),child:      Container(        decoration: BoxDecoration(          border: Border.all(color: Colors.grey),        ),        child:        new Center(child:        new FlatButton(            onPressed: null ,            child:            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                new Text("cash" , style: new TextStyle(fontSize: 10)),                new Icon(Icons.edit , color: MyColors.colorPrimary,)              ],)        )),        width: MediaQuery.of(context).size.width * 0.5,    );  }  Widget getView(List<Product> list ){//dataList  = list  ;   // _totalPrice=_totalPrice +1 ;   // print(_totalPrice);//print("call get view ") ;    if(list.length>0){      return        new Expanded(child:        new ListView.builder(        scrollDirection: Axis.vertical,        //physics: NeverScrollableScrollPhysics(),        shrinkWrap: true,        padding: EdgeInsets.zero,        itemBuilder: (context  , index ){          return listCard( index) ;        } ,itemCount:  list.length , ));    }    else{      return SizedBox();    }  }  void add(product){    setState(() {      dataList.add(product)  ;    });  }  Widget customerDropDown(){    return      //new Padding(padding:new EdgeInsets.only(bottom: 8.0 , left: 40.0  , right: 40.0 , top: 8.0) ,      // child:      Expanded(flex: 1, child: Container(        //  width:       MediaQuery.of(context).size.width * 0.5,          child:          new DropdownButton<Customer>(            isExpanded: false,            items: customersList.map((Customer value) {              return new DropdownMenuItem<Customer>(                value: value,                child: new Text(value.cNm),              );            }).toList(),            // hint: Text(selectCustomerTxt),            icon:          Image.asset('images/customer_ic.png' ,width: 24 ,height: 24,),            onChanged: onSelectCustomer,            iconEnabledColor: MyColors.colorPrimary,          ))      );  }  Widget popMenuCustomer(){  return  PopupMenuButton<Customer>(    icon: Image.asset('images/customer_ic.png' ,width: 24 ,height: 24,),    onSelected: onSelectCustomer,    itemBuilder: (BuildContext context) {    return customersList.map((Customer x) {       return PopupMenuItem<Customer>(      value: x,      child: new Text(x.cNm),    );    }).toList();    },    );  }  void onSelectCustomer(Customer c) {    setState(()  {      this.selectCustomer = c  ;      selectCustomerTxt  = c.cNm  ;      updateCustomer(c)  ;    });  }  Widget createVendorDropDown(){    return     // new Padding(padding:new EdgeInsets.only(bottom: 8.0 , left: 30.0  , right: 30.0 , top: 8.0) ,child:      //Container(width: 26 , child:     Expanded(flex: 1, child:      SearchableDropdown(      style: TextStyle(fontSize: 0 ,  ),      items: customersList.map((item) {        return new DropdownMenuItem<Customer>(            child: Text(item.cNm),            value: item);      }).toList(),      isExpanded: false,      value: selectCustomer,      isCaseSensitiveSearch: true,      iconSize: 20,      icon: Image.asset('images/customer_ic.png' ,width: 24 ,height: 24,),      searchHint: new Text(        "select",      //  style: new TextStyle(fontSize: 20 ,),      ),    //  hint:new Text("اسم المورد"),      //iconEnabledColor: MyColors.colorPrimary,      onChanged: onSelectCustomer,        )     )      ;  }  Future<void> updateCustomer  (Customer c) async {    Map  <String,dynamic> m  = new Map();    m[INV_CUSTOMER]=c.cCode ;    final l = await dbHelper.updateInvoice(m , invoice_id.toString());  }  Widget tableDropDown(){    return      Expanded(flex: 1, child:   Container(       // width:       MediaQuery.of(context).size.width * 0.5,    child:      //new Padding(padding:new EdgeInsets.only(bottom: 8.0 , left: 40.0  , right: 40.0 , top: 8.0) ,      // child:      new DropdownButton<Tables>(        isExpanded: true,        items: tablesList.map((Tables value) {          return new DropdownMenuItem<Tables>(            value: value,            child: new Text(value.tableNm),          );        }).toList(),      //  hint: Text(selectTableNm),        icon:           Image.asset('images/table_ic.png' ,width: 24 ,height: 24,color: MyColors.colorPrimary,),        onChanged: onSelectTable,        iconEnabledColor: MyColors.colorPrimary,      ) ));  }  Widget popMenuTable(){    return      Expanded(flex: 1, child:    PopupMenuButton<Tables>(      icon: Image.asset('images/table_ic.png' ,width: 24 ,height: 24,color: MyColors.colorPrimary,),      onSelected: onSelectTable,      itemBuilder: (BuildContext context) {        return tablesList.map((Tables x) {          return PopupMenuItem<Tables>(            value: x,            child: new Text(x.tableNm),          );        }).toList();      },    )      );  }  void onSelectTable(Tables t){    setState(()  {      this.selectTb = t  ;    selectTableNm  = t.tableNm  ;    updateTable(t)  ;    });  }  List<String> invoiceTypes = ["محلي" ,"سفري", "عوائل"] ;  int invLocal   = 0 ;  int Family   =  0 ;  String selectInvoiceType ;  Widget invoiceTypeDrop(){    return      //new Padding(padding:new EdgeInsets.only(bottom: 8.0 , left: 40.0  , right: 40.0 , top: 8.0) ,      // child:      Expanded(flex: 1, child:   Container(        width:       MediaQuery.of(context).size.width * 0.5,     child:   new DropdownButton<String>(        isExpanded: true        ,        items: invoiceTypes.map((String value) {          return new DropdownMenuItem<String>(            value: value,            child: new Text(value),          );        }).toList(),        hint: Text(selectInvoiceType),        onChanged: onSelectInvoiceType,        iconEnabledColor: MyColors.colorPrimary,     )) );  }  Widget popMenuInvoiceTypes(){    return      Expanded(flex: 1, child:    PopupMenuButton<String>(      icon: Image.asset('images/invoice_ic.png' ,width: 24 ,height: 24,color: MyColors.colorPrimary,),      onSelected: onSelectInvoiceType,      itemBuilder: (BuildContext context) {        return invoiceTypes.map((String x) {          return PopupMenuItem<String>(            value: x,            child: new Text(x),          );        }).toList();      },    ));  }  void onSelectInvoiceType(String t){    setState(()  {      if(t == "محلي") {        invLocal  =  0  ;        Family  =  0  ;      }      else if(t == "عوائل") {        Family  = 1  ;        invLocal  =  0  ;      }      else if(t == "سفري") {        invLocal  = 1 ;        Family  =  0  ;      }      selectInvoiceType  = t  ;      updateInvoiceType(invLocal , Family)  ;    });  }  updateTable(Tables t) async{    Map  <String,dynamic> m  = new Map();    m[INV_TABLE]=t.tableId ;    m[tableNm]= selectTableNm ;    final l = await dbHelper.updateInvoice(m , invoice_id.toString());  }  updateInvoiceType (int isLocall , int isFamilyy) async{    Map  <String,dynamic> m  = new Map();    m[isFamily]=isFamilyy;    m[isLocal]=isLocall;    print(isFamily+isFamilyy.toString() )  ;    print(isLocal+isLocall.toString())  ;    final l = await dbHelper.updateInvoice(m , invoice_id.toString());  }  Widget cashDropDown(){    return      //new Padding(padding:new EdgeInsets.only(bottom: 8.0 , left: 40.0  , right: 40.0 , top: 8.0) ,      // child:      Expanded(flex: 1, child:   Container(        width:       MediaQuery.of(context).size.width * 0.5,    child:      new DropdownButton<CashTypes>(        isExpanded: true,        items: cashTypesList.map((CashTypes value) {          return new DropdownMenuItem<CashTypes>(            value: value,            child: new Text(value.arNm),          );        }).toList(),        hint: Text(selectCashTxt),        onChanged: onSelectCashType,        iconEnabledColor: MyColors.colorPrimary,      )) );  }  Widget popMenuCash(){    return      Expanded(flex: 1, child:    PopupMenuButton<CashTypes>(      icon: Image.asset('images/pay_ic.png' ,width: 24 ,height: 24,),      onSelected: onSelectCashType,      itemBuilder: (BuildContext context) {        return cashTypesList.map((CashTypes x) {          return PopupMenuItem<CashTypes>(            value: x,            child: new Text(x.arNm),          );        }).toList();      },    ) );  }  void onSelectCashType(CashTypes c){    setState(()  {     this.selectCashType = c  ;     selectCashTxt  = c.arNm  ;    updateCash(c );    });  }  updateCash(CashTypes c) async{    Map  <String,dynamic> m  = new Map();    m[INV_CASH]=c.id ;    final l = await dbHelper.updateInvoice(m , invoice_id.toString());  }  GestureDetector  listCard  ( int index) {    Product item  = dataList[index] ;    // getBackgroundColor(requestItem ) ;    return  GestureDetector(        onTap:(){          Dialog(context ,index);          /*  Navigator.push(            context,            MaterialPageRoute(builder: (context) => Products()),          );*/          // String name  =  list[index].  name ;          //  print(name )  ;        } ,        child :Dismissible(            key: Key(item.invoiceProductId.toString()),            direction: DismissDirection.endToStart,          background: Container(            alignment: AlignmentDirectional.centerEnd,            color: Colors.redAccent,            child:Icon( Icons.delete , color: Colors.white,),),onDismissed: (direction) {  setState(() {    dbHelper.deleteOneProduct(invoiceId: invoice_id , productId: item.pCode)  ;    dataList.removeAt(index)  ;    subtractTotal(item) ;  });},            child :   new Card(                child:new Container(                  width: double.infinity,                  // color: backgroundReq,                   padding:  new EdgeInsets.all(8.0),                  child:  new  Row(                    mainAxisAlignment: MainAxisAlignment.spaceBetween,                    children: [                      new Text(item.pNmAr.length>15?item.pNmAr.substring(0,15):item.pNmAr, maxLines: 2),                      new Text(item.count.toString()) ,                      new Text(Methods.priceFormat(item.price)),                      //  new Padding(padding: EdgeInsets.all(16.0)  , child: new Text(inv.invDesc) ,) ,                    ],                  ) ,                  color: Theme.of(context).cardColor,                ) )));  }  Future <void> getCustomers() async{    List<Customer> list = new List() ;    final allRows = await dbHelper.queryAllRows(CUSTOMER_TB)  ;    for(int i  =  0  ;  i  < allRows.length  ;  i++)     {      Map<String, dynamic> map = allRows[i]  ;      Customer c  = Customer.fromSql(map)  ;      list.add(c) ;    }    setState(() {      customersList  = list ;      selectCustomerTxt =customersList[0].cNm  ;    });  }  Invoices inv;  Future <void> getInvoice() async{    final allRows = await dbHelper.getInvByID(invoice_id.toString())  ;    for(int i  =  0  ;  i  < allRows.length  ;  i++)     {      Map<String, dynamic> map = allRows[i]  ;      inv  = Invoices.getFromSqlInvoice(map)  ;      setState(()  {        _totalPrice = inv.total ;        _totalTax = inv.totalTax ;        _totalPriceAfterDiscount  =  inv.totalAfterDiscount  ;         if(inv.customerId !=null){findCustomer(inv.customerId) ;}          if(inv.tableId !=null){findTable(inv.tableId); }        if(inv.cashTypeId !=null){          findCash(inv.cashTypeId) ; }      });    }  }   findCustomer( int id ){    for(int i=0  ; i  < customersList.length ; i++){      if(customersList[i].cCode  ==id ) {        selectCustomerTxt = customersList[i].cNm  ;         break  ;      }    }   }  subtractTotal  (Product p) {     double priceAfterDisc = p.priceAfterDiscount  *p.count ;     double price = p.price  *p.count ;     double tax = p.taxAmount  *p.count ;     setState(()  {     _totalPriceAfterDiscount  = _totalPriceAfterDiscount  - priceAfterDisc  ;     _totalPrice  =  _totalPrice - price  ;     _totalTax  = _totalTax  - tax  ;     updateInvoice(_totalPrice, _totalPriceAfterDiscount, _totalTax) ;     });   }  Future<void> updateInvoice( double total ,  double totalAfter ,  double tax )  async {     Map  <String,dynamic> m  = new Map();     m[INV_TOTAL]=total ;     m[INV_TOTALTAX]=tax ;     m[INV_TOTALAFTERDISCOUNT]=totalAfter ;     final l = await dbHelper.updateInvoice(m , invoice_id.toString());   }  findTable( int id ){    for(int i =0 ; i  < tablesList.length ; i++){      if(tablesList[i].tableId  ==id ) {        selectTableNm = tablesList[i].tableNm  ;        break  ;      }    }  }  findCash( int id ){    for(int i=0  ; i  < cashTypesList.length ; i++){      if(cashTypesList[i].id  ==id ) {        selectCashTxt = cashTypesList[i].arNm  ;        break  ;      }    }  }  Future <void> getCashTypes() async{    List<CashTypes> list = new List() ;    final allRows = await dbHelper.queryAllRows(CASH_TB)  ;    for(int i  =  0  ;  i  < allRows.length  ;  i++)     {      Map<String, dynamic> map = allRows[i]  ;      CashTypes c  = CashTypes.fromSql(map)  ;      list.add(c) ;    }    setState(() {      cashTypesList  = list ;      selectCashType = cashTypesList[0];      selectCashTxt =cashTypesList[0].arNm  ;    });  }  Future <void> getTables() async{    List<Tables> list = new List() ;    final allRows = await dbHelper.queryAllRows(TABLE_TB)  ;    for(int i  =  0  ;  i  < allRows.length  ;  i++)     {      Map<String, dynamic> map = allRows[i]  ;      Tables t = Tables.fromSql(map)  ;      list.add(t) ;    }    setState(() {      tablesList  = list ;      selectTableNm =tablesList[0].tableNm  ;    });  }  Future<void> Dialog(BuildContext context , int pos ) async {    return showDialog<void>(      context: context,      barrierDismissible: false, // user must tap button!      builder: (BuildContext context) {        return AlertDialog(          content: SingleChildScrollView(            child: ListBody(              children: <Widget>[  new Expanded(  child: new TextField(  controller: qtyEd,  autofocus: true,  keyboardType: TextInputType.number,  onSubmitted: (value) {  setState(() async {    print(value) ;   /* double temp  =  dataList[pos].count * dataList[pos].priceAfterDiscount ;    double tempPrice  =  dataList[pos].count * dataList[pos].price ;    double tempTax  =  dataList[pos].count * dataList[pos].taxAmount ;    dataList[pos].count  = int.parse(value);    widget.totalPriceAfterDiscount  =  widget.totalPriceAfterDiscount -temp  ;    widget.totalPriceAfterDiscount  =  widget.totalPriceAfterDiscount+(dataList[pos].count * dataList[pos].priceAfterDiscount)  ;    _totalPrice  =  _totalPrice - tempPrice  ;    setState(() {      _totalPrice  =  _totalPrice+(dataList[pos].count * dataList[pos].price)  ;      widget.totalPrice  = _totalPrice  ;      print(widget.totalPrice) ;    });    widget.totalTax  =  widget.totalTax -tempTax  ;    widget.totalTax  =  widget.totalTax+(dataList[pos].count * dataList[pos].taxAmount)  ;*/    Product p =   dataList[pos];    print(pos) ;    print(dataList[pos].count) ;    double pervProductTotal = _totalPrice-(p.count*p.price);    double prevProductTax = _totalTax -(p.count*p.taxAmount);    double prevProductTotalAfterDiscount = _totalPriceAfterDiscount-(p.count*p.priceAfterDiscount);    p.count  = int.parse(value);    Map  <String,dynamic>  productMap  = new Map();    productMap[INVP_QTY]=  p.count ;    final id = await dbHelper.updateCount(       productMap, p.pCode , invoice_id.toString()) ;    double newProductTotal  = pervProductTotal+(p.count*p.price);    double newPoductTaxTotal  = prevProductTax+(p.count*p.taxAmount);    double newProductTotalAfterDisc  = prevProductTotalAfterDiscount+(p.count*p.priceAfterDiscount);    Map  <String,dynamic>  m  = new Map();      m[INV_TOTAL]=newProductTotal ;      m[INV_TOTALTAX]=newPoductTaxTotal ;      m[INV_TOTALAFTERDISCOUNT]=newProductTotalAfterDisc ;    final l = await dbHelper.updateInvoice(m , invoice_id.toString());    Navigator.of(context).pop();  });  },  decoration: new InputDecoration(  labelText: 'count', hintText: '1'),  ),  )              ],            ),          ),         /* actions: <Widget>[            FlatButton(              child: Text('Ok'),              onPressed: () {                print(qtyEd.text) ;                dataList[pos].count  = int.parse(qtyEd.text);                Navigator.of(context).pop();              },            ),          ],*/        );      },    );  }  Future<void> invoiceDetails() async {    return showDialog<void>(      context: context,      barrierDismissible: false, // user must tap button!      builder: (BuildContext context) {        return AlertDialog(          title: Text("invoice details"),          content: SingleChildScrollView(            child: ListBody(              children: <Widget>[                Text(" total: "+_totalPrice.toString()),                Text(" total tax : "+_totalTax.toString()),                Text(" total after disc : "+_totalPriceAfterDiscount.toString()),              ],            ),          ),           actions: <Widget>[            FlatButton(              child: Text('Ok'),              onPressed: ()  {                Navigator.of(context).pop();                /* PaperSize paper = PaperSize.mm80;                final profile = await CapabilityProfile.load();                final printer = NetworkPrinter(paper, profile);                final PosPrintResult res = await printer.connect('192.168.100.205', port: 9100);                Methods  m  = new Methods()  ;                if (res == PosPrintResult.success) {                  testReceipt(printer , inv);                  m.Dialog(context: context ,isCancelBtn: false  , message: res.msg , onOkClick:(){                  }  , title: "Done"  ) ;                  printer.disconnect();                }                else{                m.Dialog(context: context ,isCancelBtn: false  , message: res.msg , onOkClick:(){                }  , title: "error"  ) ;}                print('Print result: ${res.msg}');*/              },            ),             FlatButton(               child: Text('add discount'),               onPressed: () {                 Navigator.of(context).pop();                 discountWindow()  ;               },             ),             FlatButton(               child: Text('save invoice'),               onPressed: () async {              /*                                  */                 Navigator.of(context).pop();                 payWindow() ;               },             )          ],        );      },    );  }  String printerIp = '192.168.0.123';  var printerPort = 9100;  var printerDpi = 203.0;  var printerPaperWidth = 80.0;  /*Future<Uint8List> _generatePdf()  async {    final pdf = pw.Document();    var data = await rootBundle.load("assets/OpenSans-Regular.ttf");    var myFont = pw.Font.ttf(data);    var myStyle = pw.TextStyle(font: myFont);    //var fft =  Font.ttf(data);        pdf.addPage(      pw.Page(        orientation: pw.PageOrientation.landscape,        pageFormat:  PdfPageFormat(            printerPaperWidth * PdfPageFormat.mm, 150 * PdfPageFormat.mm),        build: (context) {          return    pw.Container(              child: pw. Column(                children: [                  new pw.Text("N# "+ inv.id.toString() , style: myStyle),                  new pw.Text("employee"+":" + user.userID , style: myStyle),                  new pw.Row(                    children: [                       pw. Row(                        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,                       // pw.mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,                        children: [                          new pw.Text("الصنف" ,style: myStyle),                          new pw.Text("الكميه" , style: myStyle),                          new pw.Text("السعر", style: myStyle),                          //  new Padding(padding: EdgeInsets.all(16.0)  , child: new Text(inv.invDesc) ,) ,                        ],                      ) ,                    // getView(inv.products)                    ],                  ),                 pw. Row(                   mainAxisAlignment:pw.MainAxisAlignment.spaceBetween,                    children: [                      new pw.Text("الاجمالي" ,style: myStyle) ,                        //style: pw.TextStyle(fontSize:20.0 , ),),                      new pw.Text(inv.totalAfterDiscount.toString() +  "ريال",style: myStyle)          //style: pw.TextStyle(fontSize:20.0 ,fontWeight: pw.FontWeight.bold  ,                      ],)                ],              )          ) ;        },      ),    );   /* final image = PdfImage.file(      pdf.document,      bytes: list, //Uint8List    );*/   return pdf.save()  ;  }*/  /*void _updateImages() async {    images.clear();    await for (var page in Printing.raster(_generatePdf(), dpi: 300)) {      images.add(PdfRasterImage(page));    }    setState(() {});  }*/  Future<void> _print( Invoices inv)   async {    PaperSize paper = PaperSize.mm80;    final profile = await CapabilityProfile.load();    final printer = NetworkPrinter(paper, profile);    final PosPrintResult res = await printer.connect('31.167.73.47', port: 9100);print(res.msg) ;Methods v  = new Methods();    await for (var page in Printing.raster( await v.generatePdf(inv, user) , dpi: printerDpi )) {      final image = page.asImage();      printer.image(image);      printer.cut();    }    printer.disconnect();  }  saveInvoice(Invoices inv  , double payed , double remind) async {    Invoices saveInv  = inv ;    print("family"+saveInv.isFamily.toString()) ;    print("local"+saveInv.isLocal.toString()) ;    saveInv.products = dataList ;    saveInv.billCloseDate  = Methods.getDateTime(settings.hoursLate.toInt()) [0] ;    saveInv.billGivenMoney  = payed ;    saveInv.billChange  = remind  ;    saveInv.customerName = selectCustomerTxt  ;    Map  <String,dynamic> m  = new Map();    if(saveInv.tableId  == null) {      saveInv.tableId   = tablesList[0].tableId ;      saveInv.tableNm   = tablesList[0].tableNm ;      m[INV_TABLE]=  saveInv.tableId ;      m[tableNm]=   saveInv.tableNm  ;    }    if(saveInv.cashTypeId == null ) {      print("null") ;      selectCashType  = cashTypesList[0];      saveInv.cashTypeId = selectCashType.id ;      m[INV_CASH] =  saveInv.cashTypeId ;    }    if(saveInv.customerId == null) {      selectCustomer  = customersList[0]  ;      saveInv.customerId =selectCustomer.cCode ;      saveInv.customerName  = "عميل نقدي" ;      m[INV_CUSTOMER]=saveInv.customerId;    }    if(saveInv.isFamily == null && saveInv.isLocal== null) {      saveInv.isFamily=  0 ;      saveInv.isLocal=  0 ;      m[isFamily]=0;      m[isLocal]=0;    }    m[INVOICE_OPEN]=0 ;    m[billCloseDate]= Methods.getDateTime(settings.hoursLate.toInt())[0] ;    print(payed.toString() ) ;    m[billGivenMoney]=payed.toString() ;    m[billChange]=remind.toString() ;    print("invinv_id "+saveInv.id.toString()) ;    print(m) ;      final l = await dbHelper.updateInvoice(m, saveInv.id.toString());      // printInv(saveInv)  ;      print("output" + l.toString());      //await _print(saveInv);      double taxPercentage = 0;      if (settings.taxIsPer) {        taxPercentage = settings.taxPercent;      }   // getLastInv() ;    tools.checkInternet((){  api.saveInvoices(invList: [saveInv] ,      taxPercentage: taxPercentage,onError:( String msg){  print(msg)  ;  int daily = saveInv.invDailyNo+1  ;  int inv_id = saveInv.id+1  ;  createNewInvoice(daily, inv_id , saveInv ,taxPercentage)  ;      } ,onSuccess:(String msg , String daily , String inv_id){  print(msg)  ;  dbHelper.deleteInvProducts(invoiceId: saveInv.id)  ;  dbHelper.deleteInv(invoiceId: saveInv.id)  ;  createNewInvoice( int.parse(daily), int.parse(inv_id)+1, saveInv ,taxPercentage)  ;  }  ) ;  } , ()  { // no connection      int daily = saveInv.invDailyNo+1  ;      int inv_id = saveInv.id+1  ;      createNewInvoice(daily, inv_id , saveInv ,taxPercentage)  ;    });    /*  showDialog(      context: context,      builder: (context) => printInvoice(saveInv , user ,taxPercentage),    );*/   // Navigator.pushReplacement( context, MaterialPageRoute(builder: (context) => MyApp(saveInv , user ))) ;  }  Future<String> createQr(Invoices inv ) async {    var tag_1 = String.fromCharCode(1) ;    var tag_2 = String.fromCharCode(2) ;    var tag_3 = String.fromCharCode(3) ;    var tag_4 = String.fromCharCode(4) ;    var tag_5 = String.fromCharCode(5) ;    String companyName  =  company.name ;    String num  =  company.taxNum ;    List <int> companyByte  = [];    companyByte  = utf8.encode(companyName);  // تحويل اسم الشركه ل byte    String companyByteToStr = utf8.decode(companyByte);    String unicodeToWindows  = await CharsetConverter.decode("windows1252", companyByte);    var length_1   = String.fromCharCode(unicodeToWindows.length);    var length_2   = String.fromCharCode(num.length);    var length_3   = String.fromCharCode(inv.billOpenDate.length);    var length_4   = String.fromCharCode(inv.total.toString().length);    var length_5   = String.fromCharCode(inv.totalTax.toString().length);    String Line_01 =tag_1  +""+ length_1 +""+ companyByteToStr ;    String Line_02 =tag_2  +""+ length_2 +""+ num ;    String Line_03 = tag_3 +""+ length_3 +""+ inv.billOpenDate ;    String Line_04 = tag_4 +""+ length_4 +""+ inv.totalAfterDiscount.toString() ;    String Line_05 = tag_5 +""+ length_5 +""+ inv.totalTax.toString() ;    String Final = Line_01 +""+ Line_02 +""+Line_03 +""+Line_04 +""+Line_05 ;    List<int> finalByteArr  = utf8.encode(Final) ;   String  qrStr  = base64.encode(finalByteArr);    print(qrStr) ;    // dXNlcm5hbWU6cGFzc3dvcmQ=    return qrStr ;    /*String credentials = ""+"aljazeera company     "+""+"300800474700003"+""+"2021-12-03 11:13:48 PM"+""+"1000"+""+"150" ;    //  String credentials = user.qrtest().toStrِing();    print(credentials) ;    convert.Codec<String, String> stringToBase64 = convert.utf8.fuse(convert.base64);    String encoded = stringToBase64.encode(credentials);    // String encoded  = "AUjYtNix2YPYqSDYp9mE2YLZhNin2K/YqSDYp9mE2LnYp9mE2YXZitipINin2YTYqtis2KfYsdipINin2YTZhdit2K/ZiNiv2KkCDzMwMDU4MTA4NjIwMDAwMwMUMjAyMS0xMi0xMFQxOTowOToyNloEBzE3NTAuMDEFBjIyOC4yNg==" ;    print(encoded) ;    String decoded = stringToBase64.decode(encoded);    print(decoded) ;*/  }  createNewInvoice ( int daily , int inv_id , Invoices saveInv , double taxPercentage) async {    List<String> dates  =  Methods.getDateTime(settings.hoursLate.toInt());    Invoices inv  =  new Invoices(id:inv_id ,isOpen: 1  , billDate: dates[1] , invDailyNo: daily,total: 0 , totalAfterDiscount: 0 , totalTax: 0 , billOpenDate: dates[0]) ;    final id = await dbHelper.insert(inv.insertDb() , INVOICE_TB);    String qrStr  = await createQr(saveInv) ;    setState(() {      invoice_id = id;      print("invoice_id getLastInv cloase "  + invoice_id.toString())   ;      ProductState.invoice_id  = id  ;    });    print("company") ;    print(company.name)  ;    //  print("company"+company.name) ;    sharedPrefs = await SharedPreferences.getInstance();    if(sharedPrefs.containsKey("printer1")) {      Printer printer = Printer.fromJsonShared(          json.decode(sharedPrefs.getString("printer1")));      Printer printer2 = null  ;      if(sharedPrefs.containsKey("printer2")){        printer2 = Printer.fromJsonShared(            json.decode(sharedPrefs.getString("printer2")));      }      Navigator.of(context).pop();      Navigator.push(context, MaterialPageRoute(builder: (context) =>          printInvoice(invv: saveInv,            userr: user,            taxPercent: taxPercentage,            company: company,            cashierPrinter: printer,            supervisorPrinter: printer2,          qrStr: qrStr,printQr: settings.printQrCode,)));    }    else{      Navigator.of(context).pop();      tools.Dialog(context: context  , title: "",   message: "Printer not found", isCancelBtn: false ,onOkClick:(){      } ) ;      // alert not    }  }  Future<void> printInv(Invoices  saveInv) async {    PaperSize paper = PaperSize.mm80;    final profile = await CapabilityProfile.load();    final printer = NetworkPrinter(paper, profile);    final PosPrintResult res = await printer.connect('31.167.73.47', port: 9100);    Methods  mm  = new Methods()  ;print(saveInv.toString()) ;    if (res == PosPrintResult.success) {      mm.Dialog(context: context ,isCancelBtn: false  , message: res.msg , onOkClick:(){      }  , title: "هيطبع ان شاء الله  اصبر "  ) ;     // await  testReceipt(printer , saveInv);     Widget  widget  = invoiceWidget(saveInv) ;      WidgetsBinding.instance.addPostFrameCallback((_)  async {        await  convertWidget(printer, widget)  ;      });      mm.Dialog(context: context ,isCancelBtn: false  , message: res.msg , onOkClick:(){      }  , title: "Done print"  ) ;      printer.disconnect();    }    else{     // testReceipt(printer , saveInv);      mm.Dialog(context: context ,isCancelBtn: false  , message: res.msg , onOkClick:(){      }  , title: "error"  ) ;}  }  final GlobalKey<State<StatefulWidget>> _printKey = GlobalKey();  Future<void> discountWindow() async {    return showDialog<void>(      context: context,      barrierDismissible: false, // user must tap button!      builder: (BuildContext context) {        return AlertDialog(          content: SingleChildScrollView(            child: Row(              children: <Widget>[    new Expanded(    child: new TextField(    controller: percentageEd,    decoration: InputDecoration(     labelText: "percentage" ),    autofocus: true,    keyboardType: TextInputType.number, onChanged:(v) {      setState(() {         if(amountEd.text.isNotEmpty) {        amountEd.text  = "0" ;         }      });    },)    ) ,                new Expanded(                    child: new TextField(                      controller: amountEd,                      decoration: InputDecoration(                          labelText: "amount" ),                      autofocus: true,                      keyboardType: TextInputType.number,                      onChanged:(v) {                        setState(() {                          if(percentageEd.text.isNotEmpty) {                            percentageEd.text  = "0" ;                          }                        });                      },)                ) ,              ],            ),          ),          actions: <Widget>[            FlatButton(              child: Text('Ok'),              onPressed: () {                if(percentageEd.text.isNotEmpty && int.parse(percentageEd.text)>0){                  applyDiscount(double.parse(percentageEd.text), true)  ;                }                else if(amountEd.text.isNotEmpty && int.parse(amountEd.text)>0){                  applyDiscount(double.parse(amountEd.text), false)  ;                }                Navigator.of(context).pop();              },            ),          ],        );      },    );  }  Color _color = MyColors.colorPrimary as Color  ;  Widget cardData ( List<CashTypes>list  , int index){    return new Expanded(        child:new Card(            child: InkWell(              onTap:(){                widget.isActive = false  ;                setState(() {                });              },child: Text(list[index].arNm),))    ) ;  }  Future<void> payWindow() async {    List<bool> _list = [true, false, true, false];    return showDialog<void>(      context: context,      barrierDismissible: false, // user must tap button!      builder: (BuildContext context) {        bool cashActive = true  ;        bool visaActive = false  ;        bool debitActive = false ;       double   remaind  = 0  ;       payedEd.text = inv.totalAfterDiscount.toString() ;        return AlertDialog(          content:            StatefulBuilder(            builder: (BuildContext context, StateSetter setState) {       return          SingleChildScrollView(        child: Container(       // height:MediaQuery.of(context).size.height,            child:Column (                mainAxisSize: MainAxisSize.min,                children: [           /*   ListView.builder(              // Create a grid with 2 columns. If you change the scrollDirection to              // horizontal, this produces 2 rows.              itemBuilder: (context  , index ){                return cardData(cashTypesList , index) ;              } ,itemCount:  3 ,                  scrollDirection: Axis.horizontal,)*/       /*     Row(            children: <Widget>[            new Expanded(            child: FlatButton(onPressed: (){              setState(() {                cashActive  = true   ;                visaActive  = false  ;                debitActive  = false  ;                print("tttttttest")  ;selectCashType = cashTypesList[0]  ;selectCashTxt  =  cashTypesList[0].arNm  ;             //   updateCash(selectCashType)  ;              });          }, child: Text(cashTypesList[0].arNm), color: cashActive ?Colors.blue:Colors.white,)          ) ,        new Expanded(        child: FlatButton(          highlightColor: _color,            onPressed: (){          setState(() {         // _color  = MyColors.grey  ;            cashActive  = false   ;            visaActive  = false  ;            debitActive  = true  ;            selectCashType = cashTypesList[1]  ;            selectCashTxt  =  cashTypesList[1].arNm  ;          //  print(selectCashTxt) ;            //updateCash(selectCashType)  ;          });        }, child: Text(cashTypesList[1].arNm), color:debitActive ?Colors.blue:Colors.white)        ) ,              new Expanded(                  child: FlatButton(                      highlightColor: _color ,                      onPressed: (){                        setState(() {                          // _color  = MyColors.grey  ;                          cashActive  = false   ;                          visaActive  = true  ;                          debitActive = false  ;                          selectCashType = cashTypesList[2]  ;                          selectCashTxt  =  cashTypesList[2].arNm  ;                        //  updateCash(selectCashType)  ;                        });        }, child: Text( cashTypesList[2].arNm), color:visaActive ?Colors.blue:Colors.white)              ) ,         ],       ),*/             Row(              children: <Widget>[                new Expanded(                    child: new TextField(                      controller: payedEd,                      decoration: InputDecoration(                        hintText: inv.totalAfterDiscount.toString(),                          labelText: "payed" ),                      autofocus: true,                      keyboardType: TextInputType.number, onChanged:(v) {                           setState((){                             remaind  = double.parse(v) -inv.totalAfterDiscount  ;                           });                    },)                ) ,                new Expanded(                    child: new TextField(                      controller: remindEd,                      decoration: InputDecoration(                              hintText: remaind.toString()                      ),                      autofocus: true,                      enabled: false,                      keyboardType: TextInputType.number,                      onChanged:(v) {                      },)                ) ,              ],            ),            ]            )));}),          actions: <Widget>[            FlatButton(              child: Text('Ok'),              onPressed: () {                saveInvoice(inv, double.parse(payedEd.text ),remaind) ;                Navigator.of(context).pop();                showAlertDialog(context);                // setState(()  {                  // updateCash(selectCashType)  ;               // });              },            ),          ],        );      },    );  }  Future<void> applyDiscount(double discount , bool isPercentage  ) async {    double discountAmount  =0  ;    if(isPercentage ) {      discountAmount  = _totalPriceAfterDiscount *(discount/100)  ;    }    else{      discountAmount  = discount  ;    }    double priceB4Discount  =  _totalPriceAfterDiscount  ;      _totalPriceAfterDiscount  = _totalPriceAfterDiscount -discountAmount  ;    Map  <String,dynamic>  invoiceMap  = new Map();    invoiceMap[INV_TOTALAFTERDISCOUNT]=   _totalPriceAfterDiscount;    final idd = await dbHelper.updateInvoice(        invoiceMap, invoice_id.toString());     double result  =  discountAmount /priceB4Discount  ;     for(int  i  =  0  ;i  <dataList.length  ;  i++){       Product  p = dataList[i]  ;    double   productDiscount  =  result*p.priceAfterDiscount   ;    p.priceAfterDiscount  =  p.priceAfterDiscount  - productDiscount  ;    p.taxAmount =  calcTaxAmount(p)  ;   // _totalTax  =       Map  <String,dynamic>  productMap  = new Map();       productMap[INVP_PRICEDISC]=  p.priceAfterDiscount ;       productMap[INVP_TAX]=  p.taxAmount ;       final id = await dbHelper.updateCount(         productMap, p.pCode , invoice_id.toString());     }    getInvoice()  ;  }  Settings  settings ;  Company  company ;   User user ;  // Printer printer  ;  SharedPreferences sharedPrefs ;  Future<void> getSetting() async {     sharedPrefs = await SharedPreferences.getInstance();    settings = Settings.fromJson(json.decode(sharedPrefs.getString("settings") )) ;    company = Company.fromJsonShared(json.decode(sharedPrefs.getString("company") )) ;    print("company111") ;    print(company.name) ;    user = User.fromJsonShared(json.decode(sharedPrefs.getString("user") )) ;    // printer = Printer.fromJsonShared(json.decode(sharedPrefs.getString("printer1") )) ;     if(!sharedPrefs.containsKey("printer1")){       showDialog<void>(           context: context,           barrierDismissible: false,           // user must tap button!           builder: (BuildContext context) {             return AlertDialog(               title: Text(AppLocalizations.of(context).translate("printer")),               content:Text(AppLocalizations.of(context).translate("alert_cashier_printer") ),               actions: [                 FlatButton(                   child: Text(AppLocalizations.of(context).translate("add_printer")),                   onPressed: () {                     Navigator.of(context).pop();                     printerOption() ;                   },                 ),                 FlatButton(                   child: Text(AppLocalizations.of(context).translate("cancel")),                   onPressed: () {                     Navigator.of(context).pop();                   },                 ),               ],             ) ;           }       );     }      }  double calcTaxAmount ( Product product) {    double taxPercent ;    if(settings.useTax) {      taxPercent  = settings.taxPercent /100 ;    }    else {      taxPercent  = product.tax / 100  ;    }    if(settings.isAddTax){      return product.priceAfterDiscount*(taxPercent/100) ;    }    else{      double x=(product.priceAfterDiscount*100)/(100+taxPercent)  ;      return x*(taxPercent/100)  ;    }  }  Widget invoiceWidget (Invoices inv){    return  Container(      child:  Column(      children: [        new Text("N# "+ inv.id.toString()),        new Text("employee"+":" + user.userID),        new Row(          children: [            new  Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                new Text(AppLocalizations.of(context).translate("item")),                new Text( AppLocalizations.of(context).translate("qty")) ,                new Text(AppLocalizations.of(context).translate("price")),                //  new Padding(padding: EdgeInsets.all(16.0)  , child: new Text(inv.invDesc) ,) ,              ],            ) ,            getView(inv.products)          ],        ),          Row(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            new Text(AppLocalizations.of(context).translate("total") ,style: TextStyle(fontSize:20.0 , ),),            new Text(inv.totalAfterDiscount.toString() +   AppLocalizations.of(context).translate("currency") ,style: TextStyle(fontSize:20.0 ,fontWeight: FontWeight.bold  ,            )            ) ],)      ],    )    ) ;  }  final  GlobalKey  _globalKey = GlobalKey();  Uint8List pngBytes; Future<void>  convertWidget( NetworkPrinter printer ,  Widget widget) async {    RepaintBoundary(      key: widget.key,      child:widget,    );    try {      GlobalKey  _globalKey = widget.key;      final RenderRepaintBoundary boundary =      _globalKey.currentContext.findRenderObject();      final image = await boundary.toImage(pixelRatio: 2.0); // image quality      final byteData = await image.toByteData(format: ImageByteFormat.png);      pngBytes = byteData.buffer.asUint8List();      Methods.printImage(printer, pngBytes) ;    } catch (e) {      print(e);    }    printer.disconnect(); }  Future<void> testReceipt(NetworkPrinter printer , Invoices inv)  async {        /* final ByteData data = await rootBundle.load('images/logo.png');         final Uint8List bytes = data.buffer.asUint8List();         final Image image = decodeImage(bytes);         printer.image(image);*/      /*   printer.text( AppLocalizations.of(context).translate("app_name") ,           styles: PosStyles(             align: PosAlign.center,             height: PosTextSize.size2,             width: PosTextSize.size2,           ),*/    final data = await rootBundle.load("assets/Hacen_Tunisia.ttf");       printer.text("N# "+ inv.id.toString(), styles: PosStyles(align: PosAlign.center));      // printer.text("customer"+":" +//findCustomer(inv.customerId), styles: PosStyles(align: PosAlign.center));      // printer.text("pay"+":" + //findCash(inv.cashTypeId), styles: PosStyles(align: PosAlign.center));       printer.text("employee"+":" + user.userID, styles: PosStyles(align: PosAlign.center , ));    printer.hr();   printer.row([      PosColumn(text: AppLocalizations.of(context).translate("item"), width: 7, ),      PosColumn(text: AppLocalizations.of(context).translate("qty"), width: 2),      PosColumn(          text: AppLocalizations.of(context).translate("price"), width: 3, styles: PosStyles(align: PosAlign.right)),    ]);print("length "  +inv.products.length.toString())  ;          for (int  i  =  0  ;  i  <inv.products.length  ; i++) {            Product  p  = inv.products[i] ;            final arabicText = utf8.encode(p.pNmAr);           // printer.textEncoded(arabicText);            printer.row([              PosColumn(width: 7,textEncoded:arabicText  , containsChinese: false , styles: PosStyles(codeTable: 'CP1252') ),              PosColumn(text:p.count.toString(),                  width: 2),              PosColumn(                  text:p.price.toString(),                  width: 3,                  styles: PosStyles(align: PosAlign.right)),            ]);          }          printer.hr();                printer.row([                      PosColumn(                          text: AppLocalizations.of(context).translate("total"),                          width: 6,                          styles: PosStyles(                            height: PosTextSize.size2,                            width: PosTextSize.size2,                          )),                      PosColumn(                          text: inv.totalAfterDiscount.toString(),                          width: 6,                          styles: PosStyles(                            align: PosAlign.right,                            height: PosTextSize.size2,                            width: PosTextSize.size2,                          )),                    ]);          printer.hr(ch: '=', linesAfter: 1);            printer.row([              PosColumn(                  text:  AppLocalizations.of(context).translate("cash"),                  width: 8,                  styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2,)),              PosColumn(                  text: inv.billGivenMoney.toString(),                  width: 4,                  styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2)),            ]);            printer.row([              PosColumn(                  text:  AppLocalizations.of(context).translate("change"),                  width: 8,                  styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2)),              PosColumn(                  text: inv.billChange.toString(),                  width: 4,                  styles: PosStyles(align: PosAlign.right, width: PosTextSize.size2)),            ]);            printer.feed(2);         printer.text('Thank you!', styles: PosStyles(align: PosAlign.center, bold: true));         final now = DateTime.now();         final formatter = DateFormat('MM/dd/yyyy H:m');         final String timestamp = formatter.format(now);         printer.text(timestamp, styles: PosStyles(align: PosAlign.center), linesAfter: 4);         printer.toString() ;           Methods  mm  = new Methods()  ;           mm.Dialog(context: context ,isCancelBtn: false  , message:"msg" , onOkClick:(){           }  , title:  printer.toString() ) ;         printer.feed(1);         printer.cut();  }  showAlertDialog(BuildContext context){    AlertDialog alert=AlertDialog(      content: new Row(        children: [          CircularProgressIndicator(),          Container(margin: EdgeInsets.only(left: 5),child:Text("Loading" )),        ],),    );    showDialog(      context:context,      builder:(BuildContext context){        return alert;      },    );  }}